{
  "hash": "577ebfb57c02e7060f6dc80171c507a6",
  "result": {
    "markdown": "---\ntitle: \"RRT Algorithm Simulation\"\ncategories: [Robotics]\nimage: RRT_main.gif\nformat:\n    html: \n        code-fold: true\n        code-overflow: scroll\n        code-tools: true\n\n---\n\n## RRT Algorithm\n\n* **The path plan should actually work on a robot.** If the path plan makes the robot turn at sharp angles but the robot can‚Äôt move at sharp angles (like a car), that path plan shouldn‚Äôt be allowed.\n\n* **The path plan should be as close to optimal as possible.** While it‚Äôs nice to find any path plan that gets the robot from a start location to a goal location, that isn‚Äôt enough unfortunately. We‚Äôd like something that‚Äôs somewhat efficient. Not only will it help the robot complete its task as fast as possible, but it‚Äôll also conserve its precious battery life.\n\n* **The path plan should avoid colliding with walls.** This obviously goes without saying. Robots can be pretty expensive, and crashing is never a good thing. My little robot alone cost me well over a thousand bucks.\n\nOne of the most popular algorithms for coming up with a path plan that tries to satisfies these conditions is called Rapidly-exploring Random Trees (RRT). Since a picture is worth a thousand words, check out the diagram below. Let‚Äôs suppose the robot has to go from a start location (the red dot) to a goal location (the green dot) in a simple map without any obstacles. Basically, we‚Äôll start off with a tree that has a root node representing the start position of the robot. After that, we‚Äôll build the tree up gradually. How? We‚Äôll take a bunch of random samples of the map, make a new node for each random sample, and insert each new node into the tree somehow. Once the tree has a node that‚Äôs close enough to the goal position of the robot, we‚Äôre done.\n\n\nHere we are using the RRT algorithm to perform motion planning in 2-DoF environments. As before, the mobile robot‚Äôs position is $\\normalsize \\theta = [ùë•, ùë¶]^ùëá$.\n\nImplementing the RRT algorithm below. This code should be able to work with an arbitrary number of circular obstacles with 2 conditions:\n\n‚Ä¢ The bounds of the workspace are $\\normalsize ùë• ‚àà [0, 1], \\, ùë¶ ‚àà [0, 1]$\n‚Ä¢ The motion plan must end within $\\normalsize \\epsilon = 0.1$  units of the goal\n\n**Code Implementation** \n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib\nmatplotlib.use('Agg')  # Set the backend to a non-interactive backend\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Circle\nfrom matplotlib.animation import PillowWriter, FuncAnimation\n\n# Define start and goal positions\ntheta_start = {'coord': np.array([0, 0]), 'parent': None}\ntheta_goal = np.array([1, 1])\n\n# Workspace bounds\nx_bounds = [0, 1]\ny_bounds = [0, 1]\n\n# Define obstacles\nobstacles = np.array([\n    [0.5, 0.3, 0.2],\n    [0.7, 0.7, 0.2],\n    [0.6, 0.4, 0.1],\n    [0.4, 0.3, 0.2],\n    [0.1, 0.75, 0.3]\n])\n\n# RRT parameters\nepsilon = 0.1  # Goal threshold\ndelta = 0.05   # Step size\nN = 1000       # Number of iterations\n\n# Initialize tree\nG = [theta_start]\n\n# Visualize environment setup\nfig, ax = plt.subplots()\nax.grid(True)\nax.set_xlim(x_bounds)\nax.set_ylim(y_bounds)\nax.set_aspect('equal')\n\n# Plot obstacles\nfor obstacle in obstacles:\n    circle = Circle(obstacle[0:2], obstacle[2], color='gray', fill=False)\n    ax.add_patch(circle)\n\n# Plot start and goal\nstart_plot, = ax.plot(theta_start['coord'][0], theta_start['coord'][1], 'ko', markerfacecolor='k')\ngoal_plot, = ax.plot(theta_goal[0], theta_goal[1], 'ko', markerfacecolor='k')\n\n# This flag is used to stop the animation once the goal is reached\ngoal_reached = False\n\n# Animation update function\ndef update(frame):\n    global G, goal_reached\n\n    if goal_reached:\n        return\n\n    theta_rand = theta_goal if np.random.rand() < 0.2 else np.random.rand(2)\n    distances = [np.linalg.norm(node['coord'] - theta_rand) for node in G]\n    theta_near_index = np.argmin(distances)\n    theta_near = G[theta_near_index]\n    vec_to_rand = theta_rand - theta_near['coord']\n    vec_to_rand = delta * vec_to_rand / np.linalg.norm(vec_to_rand)\n    theta_new = {'coord': theta_near['coord'] + vec_to_rand, 'parent': theta_near_index}\n\n    if not is_collision(theta_new['coord'], obstacles):\n        G.append(theta_new)\n        ax.plot([theta_near['coord'][0], theta_new['coord'][0]], [theta_near['coord'][1], theta_new['coord'][1]], 'k-', linewidth=2)\n        ax.plot(theta_new['coord'][0], theta_new['coord'][1], 'o', color='gray', markerfacecolor='gray')\n\n        if np.linalg.norm(theta_new['coord'] - theta_goal) < epsilon:\n            # Draw the final path in orange\n            current = theta_new\n            while current['parent'] is not None:\n                parent = G[current['parent']]\n                ax.plot([current['coord'][0], parent['coord'][0]], [current['coord'][1], parent['coord'][1]], color='orange', linewidth=3)\n                current = parent\n            goal_reached = True\n\n# Collision checking function\ndef is_collision(coord, obstacles):\n    return any(np.linalg.norm(coord - obstacle[0:2]) < obstacle[2] for obstacle in obstacles)\n\n# Create the animation\nani = FuncAnimation(fig, update, frames=N, repeat=False)\n\n# Save the animation as a GIF\ngif_path = \"RRT_main.gif\"\nwriter = PillowWriter(fps=20)\nani.save(gif_path, writer=writer)\n\n# Close the plot\nplt.close()\n```\n:::\n\n\n**MATLAB Implementation**\n\n<details>\n\n```matlab\nclear\nclose all\n\n% Define start and goal positions\ntheta_start.coord = [0; 0];\ntheta_goal = [1; 1];\n\n% Workspace bounds\nx_bounds = [0, 1];\ny_bounds = [0, 1];\n\n% Define obstacles\n% Each row is an obstacle with format: [center_x, center_y, radius]\nobstacles = [\n    0.5, 0.3, 0.2;\n    0.7, 0.7, 0.2;\n    0.6, 0.4, 0.1;\n    0.4, 0.3, 0.2;\n    0.1, 0.75, 0.3;\n    % Add as many obstacles required, satisfying the condition of arbitrary\n    % number of obstacles' inclusion\n];\n\n% RRT parameters\nepsilon = 0.1; % Goal threshold\ndelta = 0.05;  % Step size\nN = 1000;      % Number of iterations\n\n% Visualize environment\nfigure\nhold on\ngrid on\naxis([x_bounds, y_bounds])\naxis equal\n\n% Plot obstacles\nfor i = 1:size(obstacles, 1)\n    viscircles(obstacles(i, 1:2), obstacles(i, 3), 'Color', [0.5, 0.5, 0.5]);\nend\n\n% Initialize tree\ntheta_start.parent = 0;\nG(1) = theta_start;\n\n% Main RRT loop\nfor idx = 1:N\n    if norm(G(end).coord - theta_goal) < epsilon\n        break\n    end\n\n    % Random sample\n    theta_rand = rand(2,1);\n\n    % Nearest node\n    [min_dist, theta_near_index] = min(vecnorm([G.coord] - theta_rand));\n    theta_near = G(theta_near_index);\n\n    % Step towards random sample\n    vec_to_rand = theta_rand - theta_near.coord;\n    if norm(vec_to_rand) > delta\n        vec_to_rand = delta * vec_to_rand / norm(vec_to_rand);\n    end\n    theta_new.coord = theta_near.coord + vec_to_rand;\n\n    % Collision check with all obstacles\n    if isCollision(theta_new.coord, obstacles)\n        continue;\n    end\n\n    % Add new node to tree\n    theta_new.parent = theta_near_index;\n    G = [G, theta_new];\n\n    % Plotting\n    plot(theta_new.coord(1), theta_new.coord(2), 'o', 'Color', [0.5, 0.5, 0.5], ...\n    'MarkerFaceColor', [0.5, 0.5, 0.5]);\n    line([theta_near.coord(1), theta_new.coord(1)], [theta_near.coord(2), theta_new.coord(2)], 'Color', 'k', 'LineWidth', 2);\nend\n\n% Trace back path\nchild_theta = G(end);\nwhile child_theta.parent ~= 0\n    parent_theta = G(child_theta.parent);\n    line([child_theta.coord(1), parent_theta.coord(1)], [child_theta.coord(2), parent_theta.coord(2)], 'Color', [1, 0.5, 0], 'LineWidth', 3);\n    child_theta = parent_theta;\nend\n\n% Plot start and goal\nplot(theta_start.coord(1), theta_start.coord(2), 'ko', 'MarkerFaceColor', 'k');\nplot(theta_goal(1), theta_goal(2), 'ko', 'MarkerFaceColor', 'k');\n\n% Collision checking function\n\nfunction collision = isCollision(coord, obstacles)\n    collision = any(arrayfun(@(idx) norm(coord - obstacles(idx, 1:2)') < obstacles(idx, 3), 1:size(obstacles, 1)));\nend\n```\n</details>\n\n**Result**\n\n<img src=\"RRT_main.gif\" alt=\"Animated GIF\" loop width=\"50%\" height=\"50%\">\n\n\n\nNotice that centers is a matrix where each column corresponds to an obstacle center. Similarly, radii is a vector where the $\\normalsize ùëñ^{th}$ entry corresponds to the radius of the $\\normalsize ùëñ^{th}$ obstacle.\n\n * **Environment 1: One obstacle with $\\normalsize center \\; ùëê_1 = [0.55, 0.5]^ùëá \\; and \\; radius \\; ùëü_1 = 0.3$.**\n\n\n**RRT Algorithm for 1 Obstacle**\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib\nmatplotlib.use('Agg')  # Set the backend to a non-interactive backend\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Circle\nfrom matplotlib.animation import PillowWriter, FuncAnimation\n\n# Environment\ntheta_start = {'coord': np.array([0, 0])}\ntheta_goal = {'coord': np.array([1, 1])}\ncenters = np.array([[0.5], [0.5]])\nradii = np.array([0.3])\n\n# Parameters\nepsilon = 0.1\ndelta = 0.1\nN = 1000\n\n# Initialize figure\nfig, ax = plt.subplots()\nax.grid(True)\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\nax.set_aspect('equal', adjustable='box')\n\n# Draw obstacles\n\nfor idx in range(len(radii)):\n    circle = Circle(centers[:, idx], radii[idx], color=[0.5, 0.5, 0.5], alpha=0.7)\n    ax.add_patch(circle)\n\n# Plot start and goal\nax.plot(0, 0, 'ko', markerfacecolor='k')\nax.plot(1, 1, 'ko', markerfacecolor='k')\n\n# Initialize tree\ntheta_start['parent'] = None\nG = [theta_start]\nfinal_path_plotted = False\n\ndef update(frame):\n    global G, final_path_plotted\n    if frame == 0 or final_path_plotted:\n        return\n\n    # Sample random joint position\n    theta_rand = np.random.rand(2)\n\n    # Find node in G nearest to theta_rand\n    dist = [np.linalg.norm(node['coord'] - theta_rand) for node in G]\n    theta_near_index = np.argmin(dist)\n    theta_near = G[theta_near_index]\n\n    # Take a step from theta_near towards theta_rand\n    vec_to_rand = theta_rand - theta_near['coord']\n    dist_to_rand = np.linalg.norm(vec_to_rand)\n\n    theta_new = {}\n    if dist_to_rand < delta:\n        theta_new['coord'] = theta_rand\n    else:\n        theta_new['coord'] = theta_near['coord'] + delta * vec_to_rand / dist_to_rand\n\n    # Check if theta_new is collision-free\n    collision = False\n    for jdx in range(len(radii)):\n        center = centers[:, jdx]\n        radius = radii[jdx]\n        if np.linalg.norm(theta_new['coord'] - center) < radius:\n            collision = True\n            break\n\n    if collision:\n        return\n\n    # If collision-free, add theta_new to tree with parent theta_near\n    theta_new['parent'] = theta_near_index\n    G.append(theta_new)\n\n    # Plot node and edge\n    ax.plot(theta_new['coord'][0], theta_new['coord'][1], 'o', color=[0.5, 0.5, 0.5], markerfacecolor=[0.5, 0.5, 0.5])\n    ax.plot([theta_near['coord'][0], theta_new['coord'][0]], [theta_near['coord'][1], theta_new['coord'][1]], 'k-', linewidth=2)\n\n    # If goal is close enough to the last node in G, plot the final path\n    if np.linalg.norm(G[-1]['coord'] - theta_goal['coord']) < epsilon:\n        next_theta = G[-1]\n        while next_theta['parent'] is not None:\n            prev_theta = G[next_theta['parent']]\n            line, = ax.plot([next_theta['coord'][0], prev_theta['coord'][0]], [next_theta['coord'][1], prev_theta['coord'][1]], 'orange', linewidth=3)\n            next_theta = prev_theta\n\n        # Add final path to the animation\n        final_path_plotted = True\n        return line,\n\n\n# Create the animation\nani = FuncAnimation(fig, update, frames=N, repeat=False)\n\n# Save the animation\nwriter = PillowWriter(fps=20)\nani.save(\"RRT_1_obstacles.gif\", writer=writer)\n```\n:::\n\n\n**Result:**\n\n<img src=\"RRT_1_obstacles.gif\" alt=\"Animated GIF\" loop width=\"50%\" height=\"50%\">\n\n\n* **Environment 2: One obstacle with $\\normalsize center \\; ùëê_1 = [0.5, 0.3]^ùëá \\; and \\; radius \\; ùëü_1 = 0.3$. A second obstacle with $\\normalsize center \\; ùëê_2 = [0.5, 0.7]^ùëá \\; and \\; radius \\; ùëü_2 = 0.2$**\n\n**RRT Algorithm for 2 Obstacles**\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib\nmatplotlib.use('Agg')  # Set the backend to a non-interactive backend\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Circle\nfrom matplotlib.animation import PillowWriter, FuncAnimation\n\n# Environment\ntheta_start = {'coord': np.array([0, 0])}\ntheta_goal = {'coord': np.array([1, 1])}\ncenters = np.array([[0.5, 0.5], [0.3, 0.7]])\nradii = np.array([0.3, 0.2])\n\n# Parameters\nepsilon = 0.1\ndelta = 0.1\nN = 1000\n\n# Initialize figure\nfig, ax = plt.subplots()\nax.grid(True)\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\nax.set_aspect('equal', adjustable='box')\n\n# Draw obstacles\n\nfor idx in range(len(radii)):\n    circle = Circle(centers[:, idx], radii[idx], color=[0.5, 0.5, 0.5], alpha=0.7)\n    ax.add_patch(circle)\n\n# Plot start and goal\nax.plot(0, 0, 'ko', markerfacecolor='k')\nax.plot(1, 1, 'ko', markerfacecolor='k')\n\n# Initialize tree\ntheta_start['parent'] = None\nG = [theta_start]\nfinal_path_plotted = False\n\ndef update(frame):\n    global G, final_path_plotted\n    if frame == 0 or final_path_plotted:\n        return\n\n    # Sample random joint position\n    theta_rand = np.random.rand(2)\n\n    # Find node in G nearest to theta_rand\n    dist = [np.linalg.norm(node['coord'] - theta_rand) for node in G]\n    theta_near_index = np.argmin(dist)\n    theta_near = G[theta_near_index]\n\n    # Take a step from theta_near towards theta_rand\n    vec_to_rand = theta_rand - theta_near['coord']\n    dist_to_rand = np.linalg.norm(vec_to_rand)\n\n    theta_new = {}\n    if dist_to_rand < delta:\n        theta_new['coord'] = theta_rand\n    else:\n        theta_new['coord'] = theta_near['coord'] + delta * vec_to_rand / dist_to_rand\n\n    # Check if theta_new is collision-free\n    collision = False\n    for jdx in range(len(radii)):\n        center = centers[:, jdx]\n        radius = radii[jdx]\n        if np.linalg.norm(theta_new['coord'] - center) < radius:\n            collision = True\n            break\n\n    if collision:\n        return\n\n    # If collision-free, add theta_new to tree with parent theta_near\n    theta_new['parent'] = theta_near_index\n    G.append(theta_new)\n\n    # Plot node and edge\n    ax.plot(theta_new['coord'][0], theta_new['coord'][1], 'o', color=[0.5, 0.5, 0.5], markerfacecolor=[0.5, 0.5, 0.5])\n    ax.plot([theta_near['coord'][0], theta_new['coord'][0]], [theta_near['coord'][1], theta_new['coord'][1]], 'k-', linewidth=2)\n\n    # If goal is close enough to the last node in G, plot the final path\n    if np.linalg.norm(G[-1]['coord'] - theta_goal['coord']) < epsilon:\n        next_theta = G[-1]\n        while next_theta['parent'] is not None:\n            prev_theta = G[next_theta['parent']]\n            line, = ax.plot([next_theta['coord'][0], prev_theta['coord'][0]], [next_theta['coord'][1], prev_theta['coord'][1]], 'orange', linewidth=3)\n            next_theta = prev_theta\n\n        # Add final path to the animation\n        final_path_plotted = True\n        return line,\n\n\n# Create the animation\nani = FuncAnimation(fig, update, frames=N, repeat=False)\n\n# Save the animation\nwriter = PillowWriter(fps=20)\nani.save(\"RRT_2_obstacles.gif\", writer=writer)\n```\n:::\n\n\n**Result:**\n\n<img src=\"RRT_2_obstacles.gif\" alt=\"Animated GIF\" loop width=\"50%\" height=\"50%\">\n\n\n* **Environment 3: One obstacle with $\\normalsize center \\; ùëê_1 = [0.2, 0.35]^ùëá \\; and \\; radius \\; ùëü_1 = 0.2$. A second obstacle with $\\normalsize center \\; ùëê_2 = [0.5, 0.3]^ùëá \\; and \\; radius \\; ùëü_2 = 0.2$. A third obstacle with $\\normalsize center \\; ùëê_3 = [0.7, 0.5]^ùëá \\; and \\; radius \\; ùëü_3 = 0.2$**\n\nHere we are declaring it a Baseline Algorithm for 3 obstacles. Later below we will discuss the differences between a baseline and Goal-bias algorithm and their pros-cons.\n\n**Baseline RRT Algorithm**\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib\nmatplotlib.use('Agg')  # Set the backend to a non-interactive backend\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Circle\nfrom matplotlib.animation import PillowWriter, FuncAnimation\n\n# Environment\ntheta_start = {'coord': np.array([0, 0])}\ntheta_goal = {'coord': np.array([1, 1])}\ncenters = np.array([[0.2, 0.5, 0.7], [0.35, 0.3, 0.5]])\nradii = np.array([0.2, 0.2, 0.2])\n\n# Parameters\nepsilon = 0.1\ndelta = 0.1\nN = 1000\n\n# Initialize figure\nfig, ax = plt.subplots()\nax.grid(True)\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\nax.set_aspect('equal', adjustable='box')\n\n# Draw obstacles\n\nfor idx in range(len(radii)):\n    circle = Circle(centers[:, idx], radii[idx], color=[0.5, 0.5, 0.5], alpha=0.7)\n    ax.add_patch(circle)\n\n# Plot start and goal\nax.plot(0, 0, 'ko', markerfacecolor='k')\nax.plot(1, 1, 'ko', markerfacecolor='k')\n\n# Initialize tree\ntheta_start['parent'] = None\nG = [theta_start]\nfinal_path_plotted = False\n\ndef update(frame):\n    global G, final_path_plotted\n    if frame == 0 or final_path_plotted:\n        return\n\n    # Sample random joint position\n    theta_rand = np.random.rand(2)\n\n    # Find node in G nearest to theta_rand\n    dist = [np.linalg.norm(node['coord'] - theta_rand) for node in G]\n    theta_near_index = np.argmin(dist)\n    theta_near = G[theta_near_index]\n\n    # Take a step from theta_near towards theta_rand\n    vec_to_rand = theta_rand - theta_near['coord']\n    dist_to_rand = np.linalg.norm(vec_to_rand)\n\n    theta_new = {}\n    if dist_to_rand < delta:\n        theta_new['coord'] = theta_rand\n    else:\n        theta_new['coord'] = theta_near['coord'] + delta * vec_to_rand / dist_to_rand\n\n    # Check if theta_new is collision-free\n    collision = False\n    for jdx in range(len(radii)):\n        center = centers[:, jdx]\n        radius = radii[jdx]\n        if np.linalg.norm(theta_new['coord'] - center) < radius:\n            collision = True\n            break\n\n    if collision:\n        return\n\n    # If collision-free, add theta_new to tree with parent theta_near\n    theta_new['parent'] = theta_near_index\n    G.append(theta_new)\n\n    # Plot node and edge\n    ax.plot(theta_new['coord'][0], theta_new['coord'][1], 'o', color=[0.5, 0.5, 0.5], markerfacecolor=[0.5, 0.5, 0.5])\n    ax.plot([theta_near['coord'][0], theta_new['coord'][0]], [theta_near['coord'][1], theta_new['coord'][1]], 'k-', linewidth=2)\n\n    # If goal is close enough to the last node in G, plot the final path\n    if np.linalg.norm(G[-1]['coord'] - theta_goal['coord']) < epsilon:\n        next_theta = G[-1]\n        while next_theta['parent'] is not None:\n            prev_theta = G[next_theta['parent']]\n            line, = ax.plot([next_theta['coord'][0], prev_theta['coord'][0]], [next_theta['coord'][1], prev_theta['coord'][1]], 'orange', linewidth=3)\n            next_theta = prev_theta\n\n        # Add final path to the animation\n        final_path_plotted = True\n        return line,\n\n\n# Create the animation\nani = FuncAnimation(fig, update, frames=N, repeat=False)\n\n# Save the animation\nwriter = PillowWriter(fps=20)\nani.save(\"Baseline_RRT.gif\", writer=writer)\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\bhara\\AppData\\Local\\Temp\\ipykernel_6676\\592816222.py:104: UserWarning: FigureCanvasAgg is non-interactive, and thus cannot be shown\n  plt.show()\n```\n:::\n:::\n\n\n**MATLAB Implementation**\n\n<details>\n\n\n```{matlab}\nclear\nclose all\n\n% environment\ntheta_start.coord = [0; 0];\ntheta_goal.coord = [1; 1];\ncenters = [0.2, 0.5, 0.7; 0.35, 0.3, 0.5];\nradii = [0.2, 0.2, 0.2];\n\n% parameters\nepsilon = 0.1;\ndelta = 0.1;\nN = 1000;\n\n% visualize environment\nfigure\ngrid on\nhold on\naxis([0, 1, 0, 1])\naxis equal\n\nfor idx = 1:length(radii)\n viscircles(centers(:, idx)', radii(idx), 'Color', [0.5, 0.5, ...\n 0.5]);\nend\n\nplot(0, 0, 'ko', 'MarkerFaceColor', 'k')\nplot(1, 1, 'ko', 'MarkerFaceColor', 'k')\n\n% initialize tree\ntheta_start.parent = 0;\nG(1) = theta_start;\n\nfor idx = 1:N\n % stop if theta_new is close to theta_goal\n if norm(G(end).coord - theta_goal.coord) < epsilon\n break\n end\n\n % sample random joint position\n theta_rand = rand(2,1);\n\n % find node in G nearest to theta_rand\n dist = zeros(length(G), 1);\n for jdx = 1:1:length(G)\n dist(jdx) = norm(G(jdx).coord - theta_rand);\n end\n [~, theta_near_index] = min(dist);\n theta_near = G(theta_near_index);\n\n % take a step from theta_near towards theta_rand\n vec_to_rand = theta_rand - theta_near.coord;\n dist_to_rand = norm(vec_to_rand);\n\n if dist_to_rand < delta\n theta_new.coord = theta_rand;\n else\n theta_new.coord = theta_near.coord + delta * ...\n vec_to_rand/dist_to_rand;\n end\n\n % check if theta_new is collision free\n collision = false;\n for jdx = 1:length(radii)\n center = centers(:, jdx);\n radius = radii(jdx);\n if norm(theta_new.coord - center) < radius\n collision = true;\n end\n end\n\n if collision\n continue\n end\n\n % if collision free, add theta_new to tree with parent theta_near\n theta_new.parent = theta_near_index;\n G = [G, theta_new];\n\n % plot node and edge\n plot(theta_new.coord(1), theta_new.coord(2), 'o', 'Color', [0.5, ...\n 0.5, 0.5], 'MarkerFaceColor', [0.5, 0.5, 0.5])\n line([theta_near.coord(1), theta_new.coord(1)], ...\n [theta_near.coord(2), theta_new.coord(2)], 'Color', 'k', 'LineWidth', ...\n 2);\nend\n\n% work backwards from the final node to the root of the tree\nnext_theta = G(end);\nwhile next_theta.parent ~= 0\n prev_theta_idx = next_theta.parent;\n prev_theta = G(prev_theta_idx);\n line([next_theta.coord(1), prev_theta.coord(1)], ...\n [next_theta.coord(2), prev_theta.coord(2)], 'Color', [1, 0.5, ...\n 0], 'LineWidth', 3);\n next_theta = prev_theta;\nend\n```\n\n\n</details>\n\n**Result:**\n\n<img src=\"Baseline_RRT.gif\" alt=\"Animated GIF\" loop width=\"50%\" height=\"50%\">\n\n\nWe can see the trajectory plots in the above figures. Here the black lines and gray dots show the tree ùê∫, while the orange line is the final motion plan from ùúÉùë†ùë°ùëéùëüùë° to a point close to the goal $\\normalsize (\\epsilon ‚â§ 0.1)$. Each time we run your RRT code you should get a different solution: RRT builds the tree through random sampling.\n\n\n## Goal-Bias RRT Algorithm\n\nThis version will sample the goal more frequently (let‚Äôs refer to this as goal bias). For goal bias, with probability $\\normalsize 0.2$ set $\\normalsize \\theta_{rand}$ as $\\normalsize \\theta_{goal}$. Otherwise sample randomly as normal. Then we run our code 10 times for baseline and 10 times for goal bias. \n\nThus we write down how many samples it takes on average to find a motion plan. Which approach is more sample-efficient: baseline or goal bias? \n\nLet us check the implementation and results.\n\n**Goal-Bias RRT Implementation**\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib\nmatplotlib.use('Agg')  # Set the backend to a non-interactive backend\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Circle\nfrom matplotlib.animation import PillowWriter, FuncAnimation\n\n# Environment\ntheta_start = {'coord': np.array([0, 0])}\ntheta_goal = {'coord': np.array([1, 1])}\ncenters = np.array([[0.2, 0.5, 0.7], [0.35, 0.3, 0.5]])\nradii = np.array([0.2, 0.2, 0.2])\n\n# Parameters\nepsilon = 0.1\ndelta = 0.1\nN = 1000\n\n# Initialize figure\nfig, ax = plt.subplots()\nax.grid(True)\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\nax.set_aspect('equal', adjustable='box')\n\n# Draw obstacles\nfor idx in range(len(radii)):\n    circle = Circle(centers[:, idx], radii[idx], color=[0.5, 0.5, 0.5], alpha=0.7)\n    ax.add_patch(circle)\n\n# Plot start and goal\nax.plot(0, 0, 'ko', markerfacecolor='k')\nax.plot(1, 1, 'ko', markerfacecolor='k')\n\n# Initialize tree\ntheta_start['parent'] = None\nG = [theta_start]\nfinal_path_plotted = False\n\ndef update(frame):\n    global G, final_path_plotted\n    if frame == 0 or final_path_plotted:\n        return\n\n    # Sample random joint position\n    if np.random.rand() < 0.2:\n        theta_rand = theta_goal['coord']\n    else:\n        theta_rand = np.random.rand(2)\n\n\n    # Find node in G nearest to theta_rand\n    dist = [np.linalg.norm(node['coord'] - theta_rand) for node in G]\n    theta_near_index = np.argmin(dist)\n    theta_near = G[theta_near_index]\n\n    # Take a step from theta_near towards theta_rand\n    vec_to_rand = theta_rand - theta_near['coord']\n    dist_to_rand = np.linalg.norm(vec_to_rand)\n\n    theta_new = {}\n    if dist_to_rand < delta:\n        theta_new['coord'] = theta_rand\n    else:\n        theta_new['coord'] = theta_near['coord'] + delta * vec_to_rand / dist_to_rand\n\n    # Check if theta_new is collision-free\n    collision = False\n    for jdx in range(len(radii)):\n        center = centers[:, jdx]\n        radius = radii[jdx]\n        if np.linalg.norm(theta_new['coord'] - center) < radius:\n            collision = True\n            break\n\n    if collision:\n        return\n\n    # If collision-free, add theta_new to tree with parent theta_near\n    theta_new['parent'] = theta_near_index\n    G.append(theta_new)\n\n    # Plot node and edge\n    ax.plot(theta_new['coord'][0], theta_new['coord'][1], 'o', color=[0.5, 0.5, 0.5], markerfacecolor=[0.5, 0.5, 0.5])\n    ax.plot([theta_near['coord'][0], theta_new['coord'][0]], [theta_near['coord'][1], theta_new['coord'][1]], 'k-', linewidth=2)\n\n    # If goal is close enough to the last node in G, plot the final path\n    if np.linalg.norm(G[-1]['coord'] - theta_goal['coord']) < epsilon:\n        next_theta = G[-1]\n        while next_theta['parent'] is not None:\n            prev_theta = G[next_theta['parent']]\n            line, = ax.plot([next_theta['coord'][0], prev_theta['coord'][0]], [next_theta['coord'][1], prev_theta['coord'][1]], 'orange', linewidth=3)\n            next_theta = prev_theta\n\n        # Add final path to the animation\n        final_path_plotted = True\n        return line,\n\n\n# Create the animation\nani = FuncAnimation(fig, update, frames=N, repeat=False)\n\n# Save the animation\nwriter = PillowWriter(fps=20)\nani.save(\"Goal_bias_RRT.gif\", writer=writer)\n```\n:::\n\n\n**MATLAB Implementation**\n\n<details>\n\n\n```{matlab}\nclear\nclose all\n% Environment initiation\ntheta_start.coord = [0; 0];\ntheta_goal = [1; 1];\n\n% Obstacle Parameters\n% First obstacle center and radius\ncenter = [0.2; 0.35];\nradius = 0.2;\n% Second obstacle center and radius\ncenter2 = [0.5; 0.3]; \nradius2 = 0.2;\n% Third obstacle center and radius\ncenter3 = [0.7; 0.5];\nradius3 = 0.2;\n\n% Specifying parameters\nepsilon = 0.1;\ndelta = 0.1;\nN = 1000;\n\n% Visualizing the environment\nfigure\ngrid on\nhold on\naxis([0, 1, 0, 1])\naxis equal\nviscircles(center', radius, 'Color', [0.5, 0.5, 0.5]);\nviscircles(center2', radius2, 'Color', [0.7, 0.3, 0.3]); % Visualizing the second obstacle\nviscircles(center3', radius3, 'Color', [0.3, 0.5, 0.7]); % Visualizing the third obstacle\nplot(0, 0, 'ko', 'MarkerFaceColor', 'k')\nplot(1, 1, 'ko', 'MarkerFaceColor', 'k')\n\n% Initializing the tree\ntheta_start.parent = 0;\nG(1) = theta_start;\n\nfor idx = 1:N\n    \n    % Stop if the last node in G is close to theta_goal\n    if norm(G(end).coord  - theta_goal) < epsilon\n        break\n    end\n\n    % sample random joint position: probability 0.2\n    \n    if rand() < 0.2\n        theta_rand = theta_goal;\n    else\n        theta_rand = rand(2,1);\n    end\n    \n    % find node in G nearest to theta_rand\n    min_dist = inf;\n    theta_near_index = 0;\n\n    for jdx = 1:length(G)\n        coord = G(jdx).coord;\n        dist = norm(theta_rand - coord);\n        if dist < min_dist\n            min_dist = dist;\n            theta_near_index = jdx;\n        end\n    end\n\n    theta_near = G(theta_near_index);\n    % take a step from theta_near towards theta_rand\n    vec_to_rand = theta_rand - theta_near.coord;\n    dist_to_rand = norm(vec_to_rand);\n    if dist_to_rand < delta\n        theta_new.coord = theta_rand;\n    else\n        theta_new.coord = theta_near.coord + delta * ...\n        vec_to_rand/dist_to_rand;\n    end\n    \n    % check if theta_new is collision free with all obstacles\n    dist_to_obs1 = norm(theta_new.coord - center);\n    dist_to_obs2 = norm(theta_new.coord - center2);\n    dist_to_obs3 = norm(theta_new.coord - center3);\n    if dist_to_obs1 < radius || dist_to_obs2 < radius2 || dist_to_obs3 < radius3\n        continue\n    end\n\n    % if collision free, add theta_new to tree with parent theta_near\n    theta_new.parent = theta_near_index;\n    G = [G, theta_new];\n\n    % plot node and edge\n    plot(theta_new.coord(1), theta_new.coord(2), 'o', 'Color', [0.5, 0.5, 0.5], ...\n    'MarkerFaceColor', [0.5, 0.5, 0.5])\n    line([theta_near.coord(1), theta_new.coord(1)], [theta_near.coord(2), ...\n    theta_new.coord(2)], 'Color', 'k', 'LineWidth', 2);\n    drawnow\n\nend\n\n% work backwards from the final node to the root of the tree\nchild_theta = G(end);\nwhile child_theta.parent ~= 0\n\n    parent_theta_index = child_theta.parent;\n    parent_theta = G(parent_theta_index);\n    line([child_theta.coord(1), parent_theta.coord(1)], ...\n        [child_theta.coord(2), parent_theta.coord(2)], ...\n        'Color', [1, 0.5, 0], 'LineWidth', 3);\n    child_theta = parent_theta;\nend\n```\n\n\n</details>\n\n**Result:**\n\n<img src=\"Goal_bias_RRT.gif\" alt=\"Animated GIF\" loop width=\"50%\" height=\"50%\">\n\n\n\nThe samples ùëÅ across ten runs with baseline and goal bias are tabulated below.\n\n\n| run  | baseline | goal bias|\n|------|----------|----------|\n| 1    |   254    |   225    |\n| 2    |   363    |   169    |\n| 3    |   318    |   150    |\n| 4    |   590    |   143    |\n| 5    |   352    |   249    |\n| 6    |   359    |   166    |\n| 7    |   202    |   251    |\n| 8    |   267    |   162    |\n| 9    |   440    |   183    |\n| 10   |   226    |   313    |\n\n\n\nOn average, the **baseline** required **337** samples to reach a valid motion plan, while **goal bias** needed **201** samples. For **Environment 3** the evidence suggests that biasing the samples towards ùúÉùëîùëúùëéùëô decreases the total number of samples and causes RRT to reach a solution faster. Intuitively, this is because the tree is trying to move in the direction of the goal more frequently. \n\nThis is particularly advantageous when the robot is in free space (or has passed the obstacles) and should move directly towards the goal. The code snippet required to implement goal bias is shown below:\n\n**Python version**\n\n```python\n# Sample random joint position: probability 0.2\nif np.random.rand() < 0.2:\n    theta_rand = theta_goal['coord']\nelse:\n    theta_rand = np.random.rand(2)\n```\n**MATLAB version**\n\n<details>\n\n```matlab\n% sample random joint position: probability 0.2\n    \nif rand() < 0.2\n    theta_rand = theta_goal;\nelse\n    theta_rand = rand(2,1);\nend\n```\n</details>\n\n\n\n**Sample Efficiency Comparison:**\n\n‚Ä¢ Goal-biased RRT seemed to be more sample-efficient in open or less complex environments because it directs its exploration towards the goal, thereby potentially finding a path with fewer samples.\n\n‚Ä¢ In contrast, the baseline RRT might be more effective in highly cluttered environments where a direct path to the goal is less likely, and a more uniform exploration of the space is beneficial.\n\nWe need to understand the key differences between the two methods and their impact on sample efficiency:\n\n* Baseline RRT: This approach uniformly samples the entire configuration space without any bias towards the goal. It explores the space in a more scattered manner, which can be beneficial in complex environments with many obstacles. However, it might take more samples to find a path to the goal, especially in large or open spaces, because the sampling is entirely random and not directed towards the goal.\n    \n* Goal-Biased RRT: In this approach, the algorithm is biased to sample near the goal state more frequently. This bias can significantly reduce the number of samples required to find a path to the goal in many cases, especially in less complex environments or when the goal is not surrounded by obstacles. The downside is that in highly cluttered environments, this bias might lead to more samples being wasted near the goal where paths are infeasible.\n\n\n\n\n\n```{=html}\n<script>\nconst tooltipTriggerList = document.querySelectorAll('[data-bs-toggle=\"tooltip\"]')\nconst tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl))\n</script>\n<style>\ndiv#quarto-sidebar-glass { display: none !important; }\nul.navbar-nav.navbar-nav-scroll { -webkit-flex-direction: row !important; }\n/* #quarto-sidebar { padding: 5px; }\n#quarto-sidebar > * { padding: 5px; }\ndiv.sidebar-menu-container > * { padding: 5px 5px 5px 5px; }\n#quarto-margin-sidebar { padding: 40px; } */\n</style>\n```\n\n",
    "supporting": [
      "RRT_files"
    ],
    "filters": [],
    "includes": {}
  }
}